# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

# TODO: make amazon/aws-cli as the base image, then install npm
image: amazon/aws-cli:latest

pipelines:
  default:
    - parallel:
        - step:
            oidc: true
            script:
              - export AWS_REGION=us-west-2
              - export AWS_ROLE_ARN=arn:aws:iam::328403503746:role/BitbucketPipelineRole
              - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
              - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
        - step:
            image: node
            services:
              - node
            name: 'Unit Tests'
            caches:
              - node
            script:
              - npm install
              - npm run test:unit
#        - step:
#            image: cypress/base:latest
#            name: 'Integration Tests (E2E)'
#            caches:
#              - cypress
#              - node
#            script:
#              - npm ci
#              - npm run test:e2e
#            artifacts:
#              - cypress/screenshots/**
#              - cypress/videos/**
        - step:
            name: 'Lint'
            script:
              - echo "Linting scripts..."
        - step:
            name: 'Security scan'
            script:
              - echo "Your security scan goes here..."

    # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
    - step:
        name: 'Deployment to Staging'
        deployment: staging
        script:
          - echo "Your deployment to staging script goes here..."
    - step:
        name: 'Deployment to Production'
        deployment: production
        trigger: 'manual'
        script:
          - echo "Your deployment to production script goes here..."
          - npm run build
          - cd aws-cdk && cdk bootstrap && cdk synth && cdk deploy

definitions:
  services:
    node:
      image: node:latest
  caches:
    npm: $HOME/.npm
    cypress: $HOME/.cache/Cypress
